  # Indices settings
Indices:
  # First index
  # Name of the index to be created, existing index with same name will be deleted
  - index_name: subjects
    # type mapping for each property of the index
    mapping:
      programs:
        type: keyword
      program_id:
        type: keyword
      studies:
        type: keyword
      study_acronym:
        type: keyword
      study_short_description:
        type: keyword
      lab_procedures:
        type: keyword
      subject_ids:
        type: keyword
      subject_id_num:
        type: integer
      diagnoses:
        type: keyword
      rc_scores:
        type: keyword
      tumor_sizes:
        type: keyword
      chemo_regimen:
        type: keyword
      tumor_grades:
        type: keyword
      er_status:
        type: keyword
      pr_status:
        type: keyword
      endo_therapies:
        type: keyword
      meno_status:
        type: keyword
      age_at_index:
        type: keyword
      survival_time:
        type: keyword
      survival_time_unit:
        type: keyword
      tissue_type:
        type: keyword
      composition:
        type: keyword
      association:
        type: keyword
      file_type:
        type: keyword
      samples:
        type: keyword
      files:
        type: object


    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
      MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
      MATCH (ss)<-[:sf_of_study_subject]-(sf)
      MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
      MATCH (ss)<-[:demographic_of_study_subject]-(demo)
      MATCH (ss)<-[:sample_of_study_subject]-(samp)
      MATCH (ss)<-[*..2]-(parent)<--(f:file)
      OPTIONAL MATCH (f)-[:file_of_laboratory_procedure]->(lp)
      RETURN DISTINCT
      p.program_acronym AS programs,
      p.program_id AS program_id,
      (s.study_acronym + ': ' + s.study_short_description) AS studies,
      s.study_acronym AS study_acronym,
      s.study_short_description AS study_short_description,
      COLLECT(DISTINCT lp.laboratory_procedure_id) AS lab_procedures,
      ss.study_subject_id AS subject_ids,
      toInteger(split(ss.study_subject_id,'-')[2]) as subject_id_num,
      ss.disease_subtype AS diagnoses,
      sf.grouped_recurrence_score AS rc_scores,
      d.tumor_size_group AS tumor_sizes,
      tp.chemotherapy_regimen AS chemo_regimen,
      d.tumor_grade AS tumor_grades,
      d.er_status AS er_status,
      d.pr_status AS pr_status,
      tp.endocrine_therapy_type AS endo_therapies,
      demo.menopause_status AS  meno_status,
      demo.age_at_index AS age_at_index,
      demo.survival_time AS survival_time,
      demo.survival_time_unit AS survival_time_unit,
      COLLECT(DISTINCT samp.tissue_type) AS tissue_type,
      COLLECT(DISTINCT samp.composition) AS composition,
      COLLECT(DISTINCT head(labels(parent))) AS association,
      COLLECT(DISTINCT f.file_type) AS file_type,
      COLLECT(DISTINCT f { .file_id, .file_description, .file_format, .file_location, .file_name,
                           .file_size, .file_status, .file_type, .md5sum }) AS files,
      COLLECT(DISTINCT samp.sample_id) AS samples
      "
  - index_name: samples
    # type mapping for each property of the index
    mapping:
      programs:
        type: keyword
      studies:
        type: keyword
      subject_ids:
        type: keyword
      sample_ids:
        type: keyword
      diagnoses:
        type: keyword
      rc_scores:
        type: keyword
      tumor_sizes:
        type: keyword
      chemo_regimen:
        type: keyword
      tumor_grades:
        type: keyword
      er_status:
        type: keyword
      pr_status:
        type: keyword
      endo_therapies:
        type: keyword
      meno_status:
        type: keyword
      tissue_type:
        type: keyword
      composition:
        type: keyword
      association:
        type: keyword
      file_type:
        type: keyword

    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
      MATCH (ss:study_subject)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
      MATCH (ss)<-[:sf_of_study_subject]-(sf)
      MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
      MATCH (ss)<-[:demographic_of_study_subject]-(demo)
      MATCH (ss)<-[:sample_of_study_subject]-(samp)
      MATCH (ss)<-[*..2]-(parent)<--(f:file)
      OPTIONAL MATCH (f)-[:file_of_laboratory_procedure]->(lp)
      RETURN DISTINCT
      p.program_acronym AS programs,
      (s.study_acronym + ': ' + s.study_short_description) AS studies,
      samp.sample_id AS sample_ids,
      ss.study_subject_id AS subject_ids,
      ss.disease_subtype AS diagnoses,
      sf.grouped_recurrence_score AS rc_scores,
      d.tumor_size_group AS tumor_sizes,
      tp.chemotherapy_regimen AS chemo_regimen,
      d.tumor_grade AS tumor_grades,
      d.er_status AS er_status,
      d.pr_status AS pr_status,
      tp.endocrine_therapy_type AS endo_therapies,
      demo.menopause_status AS  meno_status,
      samp.tissue_type AS tissue_type,
      samp.composition AS composition,
      COLLECT(DISTINCT head(labels(parent))) AS association,
      COLLECT(DISTINCT f.file_type) AS file_type
      "
  - index_name: files
    # type mapping for each property of the index
    mapping:
      programs:
        type: keyword
      studies:
        type: keyword
      subject_ids:
        type: keyword
      file_ids:
        type: keyword
      diagnoses:
        type: keyword
      rc_scores:
        type: keyword
      tumor_sizes:
        type: keyword
      chemo_regimen:
        type: keyword
      tumor_grades:
        type: keyword
      er_status:
        type: keyword
      pr_status:
        type: keyword
      endo_therapies:
        type: keyword
      meno_status:
        type: keyword
      tissue_type:
        type: keyword
      composition:
        type: keyword
      association:
        type: keyword
      file_type:
        type: keyword

    # Cypher query will be used to retrieve data from Neo4j, and index into Elasticsearch
    cypher_query: "
      MATCH (ss:study_subject)<-[*..2]-(parent)<--(f:file)
      MATCH (ss)<-[:sf_of_study_subject]-(sf)
      MATCH (ss)<-[:diagnosis_of_study_subject]-(d)<-[:tp_of_diagnosis]-(tp)
      MATCH (ss)-[:study_subject_of_study]->(s)-[:study_of_program]->(p)
      MATCH (ss)<-[:demographic_of_study_subject]-(demo)
      MATCH (ss)<-[:sample_of_study_subject]-(samp)
      RETURN DISTINCT
      p.program_acronym AS programs,
      (s.study_acronym + ': ' + s.study_short_description) AS studies,
      ss.study_subject_id AS subject_ids,
      f.file_id AS file_ids,
      ss.disease_subtype AS diagnoses,
      sf.grouped_recurrence_score AS rc_scores,
      d.tumor_size_group AS tumor_sizes,
      tp.chemotherapy_regimen AS chemo_regimen,
      d.tumor_grade AS tumor_grades,
      d.er_status AS er_status,
      d.pr_status AS pr_status,
      tp.endocrine_therapy_type AS endo_therapies,
      demo.menopause_status AS  meno_status,
      samp.tissue_type AS tissue_type,
      samp.composition AS composition,
      head(labels(parent)) AS association,
      f.file_type AS file_type
      "